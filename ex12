#!/usr/bin/python
#
# File:       ex12
# Author:     Robert Lopez
#
# Started on  Tue Jun 12 11:06:05 2012
# Last-Updated Tue Jun 12 11:06:05 2012
#
# Description: ex12lpthwe2
#

### Opps! This is  like  dejavu.
age = raw_input("How old are you? ")
height = raw_input("How tall are you? ")
weight = raw_input("How much do you weigh? ")

print "So, you're %r old, %r tall and %r heavy." % (
    age, height, weight)



# rlopez@rlopez ~/Programming/python/ITS_python_class/its-python $ pydoc raw_input
# Help on built-in function raw_input in module __builtin__:

# raw_input(...)
#     raw_input([prompt]) -> string
    
#     Read a string from standard input.  The trailing newline is stripped.
#     If the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.
#     On Unix, GNU readline is used if enabled.  The prompt string, if given,
#     is printed without a trailing newline before reading.



# rlopez@rlopez ~/Programming/python/ITS_python_class/its-python $ pydoc open
# Help on built-in function open in module __builtin__:

# open(...)
#     open(name[, mode[, buffering]]) -> file object
    
#     Open a file using the file() type, returns a file object.  This is the
#     preferred way to open a file.  See file.__doc__ for further information.

# rlopez@rlopez ~/Programming/python/ITS_python_class/its-python $ pydoc file
# Help on class file in module __builtin__:

# class file(object)
#  |  file(name[, mode[, buffering]]) -> file object
#  |  
#  |  Open a file.  The mode can be 'r', 'w' or 'a' for reading (default),
#  |  writing or appending.  The file will be created if it doesn't exist
#  |  when opened for writing or appending; it will be truncated when
#  |  opened for writing.  Add a 'b' to the mode for binary files.
#  |  Add a '+' to the mode to allow simultaneous reading and writing.
#  |  If the buffering argument is given, 0 means unbuffered, 1 means line
#  |  buffered, and larger numbers specify the buffer size.  The preferred way
#  |  to open a file is with the builtin open() function.
#  |  Add a 'U' to mode to open the file for input with universal newline
#  |  support.  Any line ending in the input file will be seen as a '\n'
#  |  in Python.  Also, a file so opened gains the attribute 'newlines';
#  |  the value for this attribute is one of None (no newline read yet),
#  |  '\r', '\n', '\r\n' or a tuple containing all the newline types seen.
#  |  
#  |  'U' cannot be combined with 'w' or '+' mode.
#  |  
#  |  Methods defined here:
#  |  
#  |  __delattr__(...)
#  |      x.__delattr__('name') <==> del x.name
#  |  
#  |  __enter__(...)
#  |      __enter__() -> self.
#  |  
#  |  __exit__(...)
#  |      __exit__(*excinfo) -> None.  Closes the file.
#  |  
#  |  __getattribute__(...)
#  |      x.__getattribute__('name') <==> x.name
#  |  
#  |  __init__(...)
#  |      x.__init__(...) initializes x; see help(type(x)) for signature
#  |  
#  |  __iter__(...)
#  |      x.__iter__() <==> iter(x)
#  |  
#  |  __repr__(...)
#  |      x.__repr__() <==> repr(x)
#  |  
#  |  __setattr__(...)
#  |      x.__setattr__('name', value) <==> x.name = value
#  |  
#  |  close(...)
#  |      close() -> None or (perhaps) an integer.  Close the file.
#  |      
#  |      Sets data attribute .closed to True.  A closed file cannot be used for
#  |      further I/O operations.  close() may be called more than once without
#  |      error.  Some kinds of file objects (for example, opened by popen())
#  |      may return an exit status upon closing.
#  |  
#  |  fileno(...)
#  |      fileno() -> integer "file descriptor".
#  |      
#  |      This is needed for lower-level file interfaces, such os.read().
#  |  
#  |  flush(...)
#  |      flush() -> None.  Flush the internal I/O buffer.
#  |  
#  |  isatty(...)
#  |      isatty() -> true or false.  True if the file is connected to a tty device.
#  |  
#  |  next(...)
#  |      x.next() -> the next value, or raise StopIteration
#  |  
#  |  read(...)
#  |      read([size]) -> read at most size bytes, returned as a string.
#  |      
#  |      If the size argument is negative or omitted, read until EOF is reached.
#  |      Notice that when in non-blocking mode, less data than what was requested
#  |      may be returned, even if no size parameter was given.
#  |  
#  |  readinto(...)
#  |      readinto() -> Undocumented.  Don't use this; it may go away.
#  |  
#  |  readline(...)
#  |      readline([size]) -> next line from the file, as a string.
#  |      
#  |      Retain newline.  A non-negative size argument limits the maximum
#  |      number of bytes to return (an incomplete line may be returned then).
#  |      Return an empty string at EOF.
#  |  
#  |  readlines(...)
#  |      readlines([size]) -> list of strings, each a line from the file.
#  |      
#  |      Call readline() repeatedly and return a list of the lines so read.
#  |      The optional size argument, if given, is an approximate bound on the
#  |      total number of bytes in the lines returned.
#  |  
#  |  seek(...)
#  |      seek(offset[, whence]) -> None.  Move to new file position.
#  |      
#  |      Argument offset is a byte count.  Optional argument whence defaults to
#  |      0 (offset from start of file, offset should be >= 0); other values are 1
#  |      (move relative to current position, positive or negative), and 2 (move
#  |      relative to end of file, usually negative, although many platforms allow
#  |      seeking beyond the end of a file).  If the file is opened in text mode,
#  |      only offsets returned by tell() are legal.  Use of other offsets causes
#  |      undefined behavior.
#  |      Note that not all file objects are seekable.
#  |  
#  |  tell(...)
#  |      tell() -> current file position, an integer (may be a long integer).
#  |  
#  |  truncate(...)
#  |      truncate([size]) -> None.  Truncate the file to at most size bytes.
#  |      
#  |      Size defaults to the current file position, as returned by tell().
#  |  
#  |  write(...)
#  |      write(str) -> None.  Write string str to file.
#  |      
#  |      Note that due to buffering, flush() or close() may be needed before
#  |      the file on disk reflects the data written.
#  |  
#  |  writelines(...)
#  |      writelines(sequence_of_strings) -> None.  Write the strings to the file.
#  |      
#  |      Note that newlines are not added.  The sequence can be any iterable object
#  |      producing strings. This is equivalent to calling write() for each string.
#  |  
#  |  xreadlines(...)
#  |      xreadlines() -> returns self.
#  |      
#  |      For backward compatibility. File objects now include the performance
#  |      optimizations previously implemented in the xreadlines module.
#  |  
#  |  ----------------------------------------------------------------------
#  |  Data descriptors defined here:
#  |  
#  |  closed
#  |      True if the file is closed
#  |  
#  |  encoding
#  |      file encoding
#  |  
#  |  errors
#  |      Unicode error handler
#  |  
#  |  mode
#  |      file mode ('r', 'U', 'w', 'a', possibly with 'b' or '+' added)
#  |  
#  |  name
#  |      file name
#  |  
#  |  newlines
#  |      end-of-line convention used in this file
#  |  
#  |  softspace
#  |      flag indicating that a space needs to be printed; used by print
#  |  
#  |  ----------------------------------------------------------------------
#  |  Data and other attributes defined here:
#  |  
#  |  __new__ = <built-in method __new__ of type object>
#  |      T.__new__(S, ...) -> a new object with type S, a subtype of T

# rlopez@rlopez ~/Programming/python/ITS_python_class/its-python $ pydoc sys
# Help on built-in module sys:

# NAME
#     sys

# FILE
#     (built-in)

# MODULE DOCS
#     http://docs.python.org/library/sys

# DESCRIPTION
#     This module provides access to some objects used or maintained by the
#     interpreter and to functions that interact strongly with the interpreter.
    
#     Dynamic objects:
    
#     argv -- command line arguments; argv[0] is the script pathname if known
#     path -- module search path; path[0] is the script directory, else ''
#     modules -- dictionary of loaded modules
    
#     displayhook -- called to show results in an interactive session
#     excepthook -- called to handle any uncaught exception other than SystemExit
#       To customize printing in an interactive session or to install a custom
#       top-level exception handler, assign other functions to replace these.
    
#     exitfunc -- if sys.exitfunc exists, this routine is called when Python exits
#       Assigning to sys.exitfunc is deprecated; use the atexit module instead.
    
#     stdin -- standard input file object; used by raw_input() and input()
#     stdout -- standard output file object; used by the print statement
#     stderr -- standard error object; used for error messages
#       By assigning other file objects (or objects that behave like files)
#       to these, it is possible to redirect all of the interpreter's I/O.
    
#     last_type -- type of last uncaught exception
#     last_value -- value of last uncaught exception
#     last_traceback -- traceback of last uncaught exception
#       These three are only available in an interactive session after a
#       traceback has been printed.
    
#     exc_type -- type of exception currently being handled
#     exc_value -- value of exception currently being handled
#     exc_traceback -- traceback of exception currently being handled
#       The function exc_info() should be used instead of these three,
#       because it is thread-safe.
    
#     Static objects:
    
#     float_info -- a dict with information about the float inplementation.
#     long_info -- a struct sequence with information about the long implementation.
#     maxint -- the largest supported integer (the smallest is -maxint-1)
#     maxsize -- the largest supported length of containers.
#     maxunicode -- the largest supported character
#     builtin_module_names -- tuple of module names built into this interpreter
#     version -- the version of this interpreter as a string
#     version_info -- version information as a named tuple
#     hexversion -- version information encoded as a single integer
#     copyright -- copyright notice pertaining to this interpreter
#     platform -- platform identifier
#     executable -- absolute path of the executable binary of the Python interpreter
#     prefix -- prefix used to find the Python library
#     exec_prefix -- prefix used to find the machine-specific Python library
#     float_repr_style -- string indicating the style of repr() output for floats
#     __stdin__ -- the original stdin; don't touch!
#     __stdout__ -- the original stdout; don't touch!
#     __stderr__ -- the original stderr; don't touch!
#     __displayhook__ -- the original displayhook; don't touch!
#     __excepthook__ -- the original excepthook; don't touch!
    
#     Functions:
    
#     displayhook() -- print an object to the screen, and save it in __builtin__._
#     excepthook() -- print an exception and its traceback to sys.stderr
#     exc_info() -- return thread-safe information about the current exception
#     exc_clear() -- clear the exception state for the current thread
#     exit() -- exit the interpreter by raising SystemExit
#     getdlopenflags() -- returns flags to be used for dlopen() calls
#     getprofile() -- get the global profiling function
#     getrefcount() -- return the reference count for an object (plus one :-)
#     getrecursionlimit() -- return the max recursion depth for the interpreter
#     getsizeof() -- return the size of an object in bytes
#     gettrace() -- get the global debug tracing function
#     setcheckinterval() -- control how often the interpreter checks for events
#     setdlopenflags() -- set the flags to be used for dlopen() calls
#     setprofile() -- set the global profiling function
#     setrecursionlimit() -- set the max recursion depth for the interpreter
#     settrace() -- set the global debug tracing function

# FUNCTIONS
#     __displayhook__ = displayhook(...)
#         displayhook(object) -> None
        
#         Print an object to sys.stdout and also save it in __builtin__._
    
#     __excepthook__ = excepthook(...)
#         excepthook(exctype, value, traceback) -> None
        
#         Handle an exception by displaying it with a traceback on sys.stderr.
    
#     call_tracing(...)
#         call_tracing(func, args) -> object
        
#         Call func(*args), while tracing is enabled.  The tracing state is
#         saved, and restored afterwards.  This is intended to be called from
#         a debugger from a checkpoint, to recursively debug some other code.
    
#     callstats(...)
#         callstats() -> tuple of integers
        
#         Return a tuple of function call statistics, if CALL_PROFILE was defined
#         when Python was built.  Otherwise, return None.
        
#         When enabled, this function returns detailed, implementation-specific
#         details about the number of function calls executed. The return value is
#         a 11-tuple where the entries in the tuple are counts of:
#         0. all function calls
#         1. calls to PyFunction_Type objects
#         2. PyFunction calls that do not create an argument tuple
#         3. PyFunction calls that do not create an argument tuple
#            and bypass PyEval_EvalCodeEx()
#         4. PyMethod calls
#         5. PyMethod calls on bound methods
#         6. PyType calls
#         7. PyCFunction calls
#         8. generator calls
#         9. All other calls
#         10. Number of stack pops performed by call_function()
    
#     displayhook(...)
#         displayhook(object) -> None
        
#         Print an object to sys.stdout and also save it in __builtin__._
    
#     exc_clear(...)
#         exc_clear() -> None
        
#         Clear global information on the current exception.  Subsequent calls to
#         exc_info() will return (None,None,None) until another exception is raised
#         in the current thread or the execution stack returns to a frame where
#         another exception is being handled.
    
#     exc_info(...)
#         exc_info() -> (type, value, traceback)
        
#         Return information about the most recent exception caught by an except
#         clause in the current stack frame or in an older stack frame.
    
#     excepthook(...)
#         excepthook(exctype, value, traceback) -> None
        
#         Handle an exception by displaying it with a traceback on sys.stderr.
    
#     exit(...)
#         exit([status])
        
#         Exit the interpreter by raising SystemExit(status).
#         If the status is omitted or None, it defaults to zero (i.e., success).
#         If the status is numeric, it will be used as the system exit status.
#         If it is another kind of object, it will be printed and the system
#         exit status will be one (i.e., failure).
    
#     getcheckinterval(...)
#         getcheckinterval() -> current check interval; see setcheckinterval().
    
#     getdefaultencoding(...)
#         getdefaultencoding() -> string
        
#         Return the current default string encoding used by the Unicode 
#         implementation.
    
#     getdlopenflags(...)
#         getdlopenflags() -> int
        
#         Return the current value of the flags that are used for dlopen calls.
#         The flag constants are defined in the ctypes and DLFCN modules.
    
#     getfilesystemencoding(...)
#         getfilesystemencoding() -> string
        
#         Return the encoding used to convert Unicode filenames in
#         operating system filenames.
    
#     getprofile(...)
#         getprofile()
        
#         Return the profiling function set with sys.setprofile.
#         See the profiler chapter in the library manual.
    
#     getrecursionlimit(...)
#         getrecursionlimit()
        
#         Return the current value of the recursion limit, the maximum depth
#         of the Python interpreter stack.  This limit prevents infinite
#         recursion from causing an overflow of the C stack and crashing Python.
    
#     getrefcount(...)
#         getrefcount(object) -> integer
        
#         Return the reference count of object.  The count returned is generally
#         one higher than you might expect, because it includes the (temporary)
#         reference as an argument to getrefcount().
    
#     getsizeof(...)
#         getsizeof(object, default) -> int
        
#         Return the size of object in bytes.
    
#     gettrace(...)
#         gettrace()
        
#         Return the global debug tracing function set with sys.settrace.
#         See the debugger chapter in the library manual.
    
#     setcheckinterval(...)
#         setcheckinterval(n)
        
#         Tell the Python interpreter to check for asynchronous events every
#         n instructions.  This also affects how often thread switches occur.
    
#     setdlopenflags(...)
#         setdlopenflags(n) -> None
        
#         Set the flags used by the interpreter for dlopen calls, such as when the
#         interpreter loads extension modules.  Among other things, this will enable
#         a lazy resolving of symbols when importing a module, if called as
#         sys.setdlopenflags(0).  To share symbols across extension modules, call as
#         sys.setdlopenflags(ctypes.RTLD_GLOBAL).  Symbolic names for the flag modules
#         can be either found in the ctypes module, or in the DLFCN module. If DLFCN
#         is not available, it can be generated from /usr/include/dlfcn.h using the
#         h2py script.
    
#     setprofile(...)
#         setprofile(function)
        
#         Set the profiling function.  It will be called on each function call
#         and return.  See the profiler chapter in the library manual.
    
#     setrecursionlimit(...)
#         setrecursionlimit(n)
        
#         Set the maximum depth of the Python interpreter stack to n.  This
#         limit prevents infinite recursion from causing an overflow of the C
#         stack and crashing Python.  The highest possible limit is platform-
#         dependent.
    
#     settrace(...)
#         settrace(function)
        
#         Set the global debug tracing function.  It will be called on each
#         function call.  See the debugger chapter in the library manual.

# DATA
#     __stderr__ = <open file '<stderr>', mode 'w'>
#     __stdin__ = <open file '<stdin>', mode 'r'>
#     __stdout__ = <open file '<stdout>', mode 'w'>
#     api_version = 1013
#     argv = ['/usr/bin/pydoc', 'sys']
#     builtin_module_names = ('__builtin__', '__main__', '_ast', '_bisect', ...
#     byteorder = 'little'
#     copyright = 'Copyright (c) 2001-2012 Python Software Foundati...ematis...
#     dont_write_bytecode = False
#     exc_value = TypeError("<module 'sys' (built-in)> is a built-in module"...
#     exec_prefix = '/usr'
#     executable = '/usr/bin/python2.7'
#     flags = sys.flags(debug=0, py3k_warning=0, division_warn...unicode=0, ...
#     float_info = sys.float_info(max=1.7976931348623157e+308, max_...epsilo...
#     float_repr_style = 'short'
#     hexversion = 34014192
#     long_info = sys.long_info(bits_per_digit=30, sizeof_digit=4)
#     maxint = 9223372036854775807
#     maxsize = 9223372036854775807
#     maxunicode = 1114111
#     meta_path = []
#     modules = {'UserDict': <module 'UserDict' from '/usr/lib/python2.7/Use...
#     path = ['.', '/usr/lib/python2.7', '/usr/lib/python2.7/plat-linux2', '...
#     path_hooks = [<type 'zipimport.zipimporter'>]
#     path_importer_cache = {'/usr/bin': None, '/usr/bin/pydoc': <imp.NullIm...
#     platform = 'linux2'
#     prefix = '/usr'
#     py3kwarning = False
#     pydebug = False
#     stderr = <open file '<stderr>', mode 'w'>
#     stdin = <open file '<stdin>', mode 'r'>
#     stdout = <open file '<stdout>', mode 'w'>
#     subversion = ('CPython', '', '')
#     version = '2.7.3 (default, Apr 20 2012, 22:39:59) \n[GCC 4.6.3]'
#     version_info = sys.version_info(major=2, minor=7, micro=3, releaseleve...
#     warnoptions = []


# rlopez@rlopez ~/Programming/python/ITS_python_class/its-python $ 
